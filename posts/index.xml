<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Veehan&#39;s Blog</title>
    <link>http://veehan.github.io/posts/</link>
    <description>Recent content in Posts on Veehan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Mar 2018 18:18:41 -0700</lastBuildDate>
    
	<atom:link href="http://veehan.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backdoorctf 2018 - Confundo</title>
      <link>http://veehan.github.io/posts/backdoorctf_2018_confundo/</link>
      <pubDate>Mon, 19 Mar 2018 18:18:41 -0700</pubDate>
      
      <guid>http://veehan.github.io/posts/backdoorctf_2018_confundo/</guid>
      <description>(BackdoorCTF requests that flags aren&amp;rsquo;t included in write-ups, so I&amp;rsquo;ll refrain from including it and solution code here.)
The challenge is presented as a single file, confundo.v. The description hint simply states that the author wanted to write a challenge in an obscure language.
Inspecting the file, it&amp;rsquo;s immediately obvious this is a hardware description language, and if you&amp;rsquo;ve worked with these before you&amp;rsquo;ll probably recognize it as Verilog (if you haven&amp;rsquo;t, googling some of the syntax markers like endmodule will make it evident pretty quickly).</description>
    </item>
    
    <item>
      <title>GoogleCTF 2016 - Little Bobby Application</title>
      <link>http://veehan.github.io/posts/google_ctf_16_little_bobby_application/</link>
      <pubDate>Tue, 03 May 2016 09:49:11 -0400</pubDate>
      
      <guid>http://veehan.github.io/posts/google_ctf_16_little_bobby_application/</guid>
      <description>Find the vulnerability, develop an exploit, and when you&amp;rsquo;re ready, submit your APK to https://bottle-brush-tree.ctfcompetition.com. Can take up to 15 minutes to return the result.
 Firing up the application, the user is presented with a login screen along with a registration button. The title is a reference to an XKCD comic about SQL injection, so it stands to reason that getting to the flag will require some sort of injection along the way.</description>
    </item>
    
    <item>
      <title>GoogleCTF 2016 - Ill Intentions (and Can You Repo It?) Write-up</title>
      <link>http://veehan.github.io/posts/google_ctf_16_ill_intentions/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://veehan.github.io/posts/google_ctf_16_ill_intentions/</guid>
      <description>Do you have have ill intentions?
 This is an Android apk. The first thing I do is fire up the application to see what it does. I installed Android Studio and used the included SDK to fire up an Android Virtual Device (AVD). adb install illintentions.apk installs it. Running the app doesn&amp;rsquo;t do much, but does provide a hint that it can change activities through some Send_to_Activity function (probably an intent)</description>
    </item>
    
  </channel>
</rss>